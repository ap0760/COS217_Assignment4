Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Ariella Pressner

------------------------------------------------------------------------
Student 2: What is your name?

Jonathan Weinreich

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.
The course's precepts.
The course's website.
Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.
The course's current staff members outside of class time through 
office hours.
The course's current staff members outside of class time through Ed.
Current Intro Lab TAs through visits to the Intro COS Lab.

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.
The course's precepts.
The course's website.
Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.
The course's current staff members outside of class time through 
office hours.
The course's current staff members outside of class time through Ed.
Current Intro Lab TAs through visits to the Intro COS Lab.

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

This assignment was big but a fun challenge.

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

All of these warnings are a result of the code that was given to us.
dtGood.c: (in function DT_traversePath)
dtGood.c:94:42: Variable ulChildID used before definition
An rvalue is used that may not be initialized to a value on some 
execution path. (Use -usedef to inhibit warning)
nodeDTGood.c: (in function Node_new)
nodeDTGood.c:148:48: Variable ulIndex used before definition
nodeDTGood.c: (in function Node_free)
nodeDTGood.c:180:35: Variable ulIndex used before definition
path.h:94:13: Function exported but not used outside path: 
Path_getComponent
A declaration is exported, but not used outside this module. 
Declaration can use static qualifier. 
(Use -exportlocal to inhibit warning)

path.c:316:1: Definition of Path_getComponent

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None.

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

The only warnings we got were results of repurposing the given DT code.
path.h:94:13: Function exported but not used outside path:
 Path_getComponent

  A declaration is exported, but not used outside this module. 
  Declaration can use static qualifier. 
  (Use -exportlocal to inhibit warning)

   path.c:316:1: Definition of Path_getComponent

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

ft.c: line 329: medium priority:
Do you want to validate 'pvContents' through an assert?
No - the contents are allowed to be NULL.

ft.c: line 530: medium priority:
Do you want to validate 'pvNewContents' through an assert?
No - the contents are allowed to be NULL.

nodeFT.c: line 78: medium priority:
Do you want to validate 'pvContents' through an assert?
No - the contents are allowed to be NULL.

nodeFT.c: line 334: medium priority:
Do you want to validate 'pvNewContents' through an assert?
No - the contents are allowed to be NULL.

There were additional warnings about too many lines/functions/etc,
but we did not include them here because they fell under the exceptions
listed in the assignment specs.
------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insert
---------------------------------------------------------------
         ./bdtBad2        BDT_freeSubtree
---------------------------------------------------------------
         ./bdtBad3        BDT_addChild
---------------------------------------------------------------
         ./bdtBad4        BDT_strlenAccumulate
---------------------------------------------------------------
         ./bdtBad5        BDT_findNode
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

- There are many modules which are #included both in a header file
and in the corresponding implementation. This is redundant and
inefficient.
- Node_compare is not used outside of the Node module. Given the
current implementation it should therefore be declared as static,
though one could argue that it is worth keeping as a function that
a potential client may want to use.
The same is true of Path_getComponent.

splint warnings:
- There are several variables used before definition, specifically
ulChildID in DT_traversePath and ulIndex in nodeDTGood.c

critTer warnings:
- Overall, there are several long loops

Questionable naming conventions/parameter order:
- Dynarray addAt, removeAt, toArray, search
There is a variable named “u” used as the array index variable. This
variable should be given a meaningful name, such as uIndex so that the
code is more readable and easier to understand.
- DT_preOrderTraversal
Every single variable in this function has a one letter name instead of
a meaningful name. This makes it very hard to understand what is being
passed into each function and which variables are being used to do what
in the code. Additionally, the parameters of DT_preOrderTraversal are
in the order of Node_T, DynArray_T, size_t, while these same parameters
are passed into DynArray_set in the order of DynArray_T, size_t, Node_T.
This is confusing - parameter order should be consistent throughout the
module.
- DT_toString
“nodes” is a DynArray_T, though it would be better if there was some
indicator of this in the variable name itself (ex. oDNodes). Then
later in the code it would be more clear what type of object we are
working with and what functions can be performed on it.
- Node_addChild
Node_addChild takes a parent node, child node, and an index.
DynArray_addAt takes a dynarray of children, an index, and a child node.
The dynarray addAt function is called within the Node_addChild function,
so the two functions should have the same parameter order (both index
then child or both child then index).
- Node_new vs Node_hasChild - Path parent result vs parent path childID
There should be a consistent parameter order. Either the path is always
first or the parent is always first.
- Node_new
The new node is called psNew. This is not a good name because the 
new node is an object, which should be differentiated from pointers 
to structs. A better name would be oNNewNode, which would emphasize 
that it’s an object. Shouldn’t use struct node, use pointer to node 
(Node_T) instead to reinforce the idea of the node as an object.
- Path_getSharedPrefixDepth
Should have a meaningful name for i because it is used a lot in 
the second half of the function.


------------------------------------------------------------------------